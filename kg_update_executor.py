#!/usr/bin/env python3
"""
KG Update Executor
Executes KG update commands generated by LLM.
"""

from typing import Dict
from kg_storage import (
    add_food_node, update_food_node, add_interaction, get_or_create_zone
)


def execute_kg_update(
    kg: Dict,
    command: Dict,
    narration_info: Dict,
    verbose: bool = False
) -> bool:
    """
    Execute a KG update command.

    Args:
        kg: Knowledge graph
        command: Parsed update command from LLM
        narration_info: Original narration info
        verbose: Print detailed information

    Returns:
        True if successful
    """
    update_type = command['update_type']
    history_entry = command['history_entry']

    # Get or create location context zone
    location_context = None
    if narration_info.get('location_entity'):
        location_context = get_or_create_zone(
            kg,
            narration_info['location_entity'],
            "Storage"
        )
        history_entry['location_context'] = location_context

    if update_type == "CREATE_NEW":
        # Create new food node
        new_food_info = command.get('new_food_info', {})
        food_name = new_food_info.get('name', narration_info['food_entity'])

        # Determine initial location
        initial_location = None
        if 'location' in command.get('updates', {}):
            if command['updates']['location']:
                initial_location = get_or_create_zone(kg, narration_info['location_entity'], "Storage")

        food_id = add_food_node(
            kg,
            name=food_name,
            state=new_food_info.get('state', 'unknown'),
            quantity=new_food_info.get('quantity', 'unknown'),
            location=initial_location,
            first_seen_time=narration_info['start_time']
        )

        # Add interaction
        add_interaction(
            kg, food_id,
            history_entry['start_time'],
            history_entry['end_time'],
            history_entry['action'],
            history_entry['narration_text'],
            history_entry.get('location_context', '')
        )

        if verbose:
            print(f"  ✓ Created new food: {food_id}")

    else:
        # Update existing food
        food_id = command['target_food_id']

        if food_id not in kg['foods']:
            print(f"  Error: Food ID {food_id} not found in KG")
            return False

        # Apply updates
        updates = command.get('updates', {})
        if updates:
            # Handle location update
            if 'location' in updates:
                if updates['location'] is None:
                    # Food is now in hand
                    updates['location'] = None
                elif updates['location'].startswith('zone_'):
                    # Already a zone_id
                    pass
                else:
                    # Convert location name to zone_id
                    updates['location'] = get_or_create_zone(kg, updates['location'], "Storage")

            update_food_node(kg, food_id, updates)

            if verbose:
                print(f"  ✓ Updated {food_id}: {updates}")

        # Add interaction
        add_interaction(
            kg, food_id,
            history_entry['start_time'],
            history_entry['end_time'],
            history_entry['action'],
            history_entry['narration_text'],
            history_entry.get('location_context', '')
        )

        if verbose:
            print(f"  ✓ Added interaction to {food_id}")

    return True
